{"version":3,"file":"index.js","sources":["webpack:///webpack/bootstrap 710b5c42f4d28b935b5b","webpack:///./mainIndexView.ts","webpack:///./infrastructure/ajax.ts","webpack:///./infrastructure/enums.ts","webpack:///./infrastructure/initializer.ts","webpack:///./infrastructure/handlers.ts","webpack:///./infrastructure/view.ts","webpack:///./graphics/displayer.ts","webpack:///./core/model.ts","webpack:///./graphics/chartDisplayer.ts","webpack:///./graphics/elementDisplayer.ts","webpack:///./graphics/chart.ts","webpack:///./graphics/tableDisplayer.ts","webpack:///./graphics/tableMaker.ts","webpack:///./infrastructure/signalR.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 710b5c42f4d28b935b5b","/// <reference path=\"../../typings/jquery/jquery.d.ts\" />\r\n\r\nimport { Ajax } from \"./infrastructure/ajax\"\r\nimport * as Enums from \"./infrastructure/enums\";\r\nimport { Initializer } from \"./infrastructure/initializer\"\r\nimport * as Model from \"./core/model\"\r\nimport { Displayer } from \"./graphics/displayer\"\r\nimport { Notifier } from \"./infrastructure/signalR\"\r\n\r\n$(document)\r\n    .ready(() =>\r\n    {\r\n        let inputUrlErorrs = $(\"#inputUrlErorrs\");\r\n        let startBtnWaiter = $(\"#startTestWaiter\");\r\n        let stBtnDefText = $(\"#startTestDefaultText\");\r\n        startBtnWaiter.hide();\r\n        let startBtn = $(\"#startTestBtn\");\r\n        let testTroviderUrl = startBtn.attr('data-url');\r\n        let inputUrl = $(\"#input_url\");\r\n        let modalWaiter = $(\"#modalWaiter\");\r\n        modalWaiter.hide();\r\n\r\n        let displayer = new Displayer(\"#chartContainer\", \"#tableContainer\");\r\n\r\n        let notifier = new Notifier((m) =>\r\n        {\r\n            displayer.show();\r\n            displayer.visualize(m);\r\n        });\r\n\r\n        startBtn\r\n            .click((e) =>\r\n            {\r\n                e.preventDefault();\r\n                inputUrlErorrs.html(\"\");\r\n                inputUrl.removeClass(\"field-error\");\r\n                let value = inputUrl.val();\r\n                let isValueValid = false;\r\n\r\n                if (/^(ftp|http|https):\\/\\/[^ \"]+$/.test(value))\r\n                {\r\n                    isValueValid = true;\r\n                }\r\n                else if (/^[a-zA-Z0-9][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9]{0,1}\\.([a-zA-Z]{1,6}|[a-zA-Z0-9-]{1,30}\\.[a-zA-Z]{2,3})$/.test(value))\r\n                {\r\n                    value = \"http://\" + value;\r\n                    isValueValid = true;\r\n                }\r\n\r\n                if (isValueValid)\r\n                {\r\n                    startBtnWaiter.show();\r\n                    stBtnDefText.hide();\r\n\r\n                    displayer.clean();\r\n\r\n                    $.ajax({\r\n                        type: \"POST\",\r\n                        url: testTroviderUrl,\r\n                        data: {\r\n                            url: value,\r\n                            connectionId: notifier.connectionId\r\n                        },\r\n                        success: (v: Model.TestResult) =>\r\n                        {\r\n                            if (!v.TestCompletedSuccessfully)\r\n                            {\r\n                                inputUrlErorrs.html(v.Exception.Message);\r\n                                startBtnWaiter.hide();\r\n                                stBtnDefText.show();\r\n                                inputUrl.addClass(\"field-error\");\r\n                            }\r\n                            else\r\n                            {\r\n                                startBtnWaiter.hide();\r\n                                stBtnDefText.show();\r\n\r\n                                displayer.sortAndDisplay();\r\n                            }\r\n                        },\r\n                        error: () =>\r\n                        {\r\n                            startBtnWaiter.hide();\r\n                            stBtnDefText.show();\r\n                            inputUrl.addClass(\"field-error\");\r\n\r\n                            displayer.hide();\r\n                        }\r\n                    });\r\n                }\r\n                else\r\n                {\r\n                    inputUrl.addClass(\"field-error\");\r\n                }\r\n            });\r\n\r\n        $(\"#historyBtn\")\r\n            .click(function ()\r\n            {\r\n                modalWaiter.show();\r\n                let updateTarget: string = $(this).attr('data-update-custom');\r\n                let el = $(updateTarget);\r\n                $.ajax({\r\n                    type: $(this).attr('data-ajax-method'),\r\n                    url: $(this).attr('data-url'),\r\n                    success: e =>\r\n                    {\r\n                        modalWaiter.hide();\r\n                        el.html(e);\r\n\r\n                        // find pager's btn and set handlers\r\n                        Initializer.pagerInit(updateTarget + \" ul.pager a\", \"#historyTable\");\r\n                    }\r\n                });\r\n            });\r\n\r\n        let historyConteiner = document.querySelector(\"#historyContainer\");\r\n        historyConteiner.addEventListener(\"click\",\r\n            (arg: MouseEvent) =>\r\n            {\r\n                arg.preventDefault();\r\n                let eventSource = $(arg.target);\r\n\r\n                if (eventSource.is(\"a\") &&\r\n                    eventSource.attr(\"data-toggle\") === \"collapse\" &&\r\n                    eventSource.attr(\"data-switch\") === \"true\")\r\n                {\r\n                    let rowId = eventSource.attr('href');\r\n                    let uri = eventSource.attr('data-url');\r\n\r\n                    Ajax.run(Enums.HttpMethod.POST,\r\n                        uri,\r\n                        {\r\n                            historyRowId: rowId.slice(1),\r\n                            startIndex: 0\r\n                        },\r\n                        (siteMap: string) =>\r\n                        {\r\n                            $(rowId).html(siteMap);\r\n\r\n                            eventSource.attr(\"data-switch\", \"false\");\r\n\r\n                            // find pager's btn and set handlers\r\n                            Initializer.pagerInit(rowId + \" ul.pager a\", \"#sitemapTable\");\r\n                        });\r\n                }\r\n            });\r\n    });\r\n\n\n\n// WEBPACK FOOTER //\n// ./mainIndexView.ts","/// <reference path=\"../../../typings/jquery/jquery.d.ts\" />\r\n\r\nimport * as Enums from \"./enums\";\r\n\r\nexport class Ajax\r\n{\r\n    static run<T, TDoneEventArg>(httpMethodType: Enums.HttpMethod,\r\n        url: string,\r\n        data: T,\r\n        callBackOnDone: JQueryPromiseCallback<TDoneEventArg>)\r\n    {\r\n        $.ajax({\r\n            type: Enums.HttpMethod[httpMethodType],\r\n            url: url,\r\n            data: data\r\n        })\r\n            .done(callBackOnDone);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./infrastructure/ajax.ts","export enum HttpMethod\r\n{\r\n    GET,\r\n    POST,\r\n    PUT,\r\n    DELETE\r\n}\r\n\r\nexport enum PagerElementRole\r\n{\r\n    First = 1,\r\n    Next,\r\n    Previous,\r\n    Last\r\n}\n\n\n// WEBPACK FOOTER //\n// ./infrastructure/enums.ts","import { PagerAjaxHandler } from \"./handlers\";\r\nimport * as View from \"./view\";\r\n\r\nexport class Initializer {\r\n   \r\n    static pagerInit(selector: string, updateTarget: string)\r\n    {\r\n        // find pager's btn and set handlers\r\n        let pager: View.Pager;\r\n        try\r\n        {\r\n            pager = new View.Pager(selector);\r\n        }\r\n        catch (e)\r\n        {\r\n            return;\r\n        }\r\n\r\n        let pagerAjax = new PagerAjaxHandler(pager, updateTarget);\r\n        pager.nextBtn.click = () =>\r\n        {\r\n            pagerAjax.sendAjaxRequest(pager.nextBtn);\r\n        };\r\n\r\n        pager.previousBtn.click = () =>\r\n        {\r\n            pagerAjax.sendAjaxRequest(pager.previousBtn);\r\n        };\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./infrastructure/initializer.ts","import * as Model from \"../core/model\";\r\nimport {Ajax} from \"./ajax\"\r\nimport * as Enums from \"./enums\";\r\nimport * as View from \"./view\";\r\n\r\nexport class PagerAjaxHandler\r\n{\r\n    pager: View.Pager;\r\n    updateTarget: string;\r\n\r\n    constructor(pager: View.Pager, updateTarget: string)\r\n    {\r\n        this.pager = pager;\r\n        this.updateTarget = updateTarget;\r\n    }\r\n\r\n    sendAjaxRequest(pagerBtn: View.PagerBtn)\r\n    {\r\n        if (!pagerBtn.isEnabled)\r\n            return;\r\n\r\n        let ajaxData;\r\n        if (!pagerBtn.rowId)\r\n            ajaxData = { startIndex: pagerBtn.startIndex };\r\n        else\r\n            ajaxData = { historyRowId: pagerBtn.rowId, startIndex: pagerBtn.startIndex}\r\n\r\n        Ajax.run(Enums.HttpMethod.POST,\r\n            pagerBtn.url,\r\n            ajaxData,\r\n            (newPage: Model.HistoryPage<string>) =>\r\n            {\r\n                $(this.updateTarget).html(newPage.contentHistory);\r\n                this.pagerBtnStyleToggle(newPage);\r\n            });\r\n    }\r\n\r\n    private pagerBtnStyleToggle(model: Model.HistoryPage<string>)\r\n    {\r\n        this.pager.previousBtn.startIndex = model.historyPager.previousStartIndex;\r\n        this.pager.previousBtn.isEnabled = !model.historyPager.isFirstPage;\r\n        this.pager.nextBtn.startIndex = model.historyPager.nextStartIndex;\r\n        this.pager.nextBtn.isEnabled = !model.historyPager.isLastPage;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./infrastructure/handlers.ts","/// <reference path=\"../../../typings/jquery/jquery.d.ts\" />\r\n\r\nimport * as Enums from \"./enums\";\r\n\r\nexport class PagerBtn\r\n{\r\n    private element: JQuery;\r\n\r\n    constructor(element: Element)\r\n    {\r\n        this.element = $(element);\r\n    }\r\n\r\n    set click(value: (eventObject: JQueryEventObject) => any)\r\n    {\r\n        this.element.click(value);\r\n    }\r\n\r\n    set isEnabled(value: boolean)\r\n    {\r\n        if (value)\r\n            this.element.parent().removeClass(\"disabled\");\r\n        else\r\n            this.element.parent().addClass(\"disabled\");\r\n    }\r\n    get isEnabled(): boolean\r\n    {\r\n        return !this.element.parent().hasClass(\"disabled\");\r\n    }\r\n\r\n    get role(): Enums.PagerElementRole\r\n    {\r\n\r\n        return Enums.PagerElementRole[this.element.attr(\"data-role\")];\r\n    }\r\n\r\n    get startIndex(): number\r\n    {\r\n        return +this.element.attr(\"data-start-index\");\r\n    }\r\n    set startIndex(value: number)\r\n    {\r\n        this.element.attr(\"data-start-index\", value);\r\n    }\r\n\r\n    get url(): string\r\n    {\r\n        return this.element.attr(\"href\");\r\n    }\r\n\r\n    get rowId(): string\r\n    {\r\n        return this.element.attr(\"data-history-row-id\");\r\n    }\r\n}\r\n\r\nexport class Pager\r\n{\r\n    nextBtn: PagerBtn;\r\n    previousBtn: PagerBtn;\r\n    selector: string;\r\n\r\n    constructor(selector: string)\r\n    {\r\n        this.selector = selector;\r\n        this.getPagerElements(selector);\r\n    }\r\n\r\n    private getPagerElements(selector: string)\r\n    {\r\n        let elments = $(selector);\r\n        if (elments.length !== 0)\r\n        {\r\n            elments.each((index: number, elem: Element) =>\r\n            {\r\n                switch (Enums.PagerElementRole[$(elem).attr(\"data-role\")])\r\n                {\r\n                    case Enums.PagerElementRole.Next:\r\n                        this.nextBtn = new PagerBtn(elem);\r\n                        break;\r\n                    case Enums.PagerElementRole.Previous:\r\n                        this.previousBtn = new PagerBtn(elem);\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n        else\r\n        {\r\n            throw \"selector does not indicate page elements\";\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./infrastructure/view.ts","import * as Model from \"../core/model\"\r\nimport MeasurementsViewModel = Model.MeasurementsViewModel;\r\nimport MeasurementResult = Model.MeasurementResult;\r\nimport { ChartDisplayer } from \"./chartDisplayer\"\r\nimport { TableDisplayer } from \"./tableDisplayer\"\r\n\r\nexport class Displayer\r\n{\r\n    private isHidden = true;\r\n    private chartDisplayer: ChartDisplayer;\r\n    private tableDisplayer: TableDisplayer;\r\n    private model: MeasurementsViewModel;\r\n\r\n    constructor(chartId: string, tableContainerId: string)\r\n    {\r\n        this.model = new MeasurementsViewModel();\r\n        this.chartDisplayer = new ChartDisplayer(chartId, this.model);\r\n        this.tableDisplayer = new TableDisplayer(tableContainerId, this.model);\r\n    }\r\n\r\n    visualize(model: MeasurementResult)\r\n    {\r\n        this.format(model);\r\n        this.model.push(model);\r\n        this.chartDisplayer.display(model);\r\n        this.tableDisplayer.display(model);\r\n    }\r\n\r\n    clean()\r\n    {\r\n        this.model.results = [];\r\n        this.tableDisplayer.clear();\r\n        this.chartDisplayer.clear();\r\n    }\r\n\r\n    sortAndDisplay()\r\n    {\r\n        this.model.sortModelExceptFirst();\r\n        this.chartDisplayer.display();\r\n        this.tableDisplayer.display();\r\n    }\r\n\r\n    show()\r\n    {\r\n        if (!this.isHidden) return;\r\n        this.chartDisplayer.show();\r\n        this.tableDisplayer.show();\r\n        this.isHidden = false;\r\n    }\r\n\r\n    hide()\r\n    {\r\n        if (this.isHidden) return;\r\n        this.chartDisplayer.hide();\r\n        this.tableDisplayer.hide(); \r\n        this.isHidden = true;\r\n    }\r\n\r\n    private format(model: MeasurementResult)\r\n    {\r\n        model.mintime = +model.mintime.toFixed(2);\r\n        model.maxtime = +model.maxtime.toFixed(2);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./graphics/displayer.ts","export class MeasurementsViewModel\r\n{\r\n    results: MeasurementResult[];\r\n\r\n    constructor(model?: MeasurementResult[])\r\n    {\r\n        this.results = model;\r\n    }\r\n\r\n    sortModelExceptFirst()\r\n    {\r\n        let first = this.results.shift();\r\n        this.sortModel();\r\n        this.results.unshift(first);\r\n    }\r\n\r\n    sortModel()\r\n    {\r\n        this.results.sort((a, b) => b.mintime - a.mintime);\r\n    }\r\n\r\n    push(value: MeasurementResult)\r\n    {\r\n        this.results.push(value);\r\n    }\r\n}\r\n\r\nexport class MeasurementResult {\r\n    url: string;\r\n    mintime: number;\r\n    maxtime: number;\r\n}\r\n\r\nexport class HistoryPage<T> {\r\n    contentHistory: T;\r\n    historyPager: HistoryPager;\r\n}\r\n\r\nexport class HistoryPager\r\n{\r\n    isLastPage: boolean;\r\n    isFirstPage: boolean;\r\n    previousStartIndex: number;\r\n    nextStartIndex: number;\r\n}\r\n\r\nexport class TestResult {\r\n    TestCompletedSuccessfully: boolean;\r\n    Exception: any;\r\n    CrawledPagesCount: number;\r\n    TestedPagesCount: number;\r\n    Elapsed: any;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./core/model.ts","import { ElementDisplayer } from \"./elementDisplayer\"\r\nimport { Chart } from \"./chart\"\r\nimport * as Model from \"../core/model\"\r\nimport MeasurementResult = Model.MeasurementResult;\r\nimport MeasurementsViewModel = Model.MeasurementsViewModel;\r\n\r\nexport class ChartDisplayer extends ElementDisplayer<MeasurementsViewModel>\r\n{\r\n    private chart: Chart;\r\n    private modelParts: ResultPack;\r\n\r\n    constructor(divContainerId: string, model: MeasurementsViewModel)\r\n    {\r\n        super(divContainerId, model);\r\n        this.chartInit(this.htmlElement);\r\n        this.dataInit();\r\n        this.chart.create();\r\n    }\r\n\r\n    protected displayFromLocalModel()\r\n    {\r\n        this.replaceChartData(this.splitModel());\r\n        this.chart.update();\r\n    }\r\n\r\n    protected displayFromOuterModel<T extends MeasurementResult>(model: T)\r\n    {\r\n        this.updateChart(model);\r\n    }\r\n\r\n    clear()\r\n    {\r\n        this.modelParts = new ResultPack();\r\n        this.replaceChartData(this.modelParts);\r\n    }\r\n\r\n    private updateModelParts(value: MeasurementResult)\r\n    {\r\n        this.modelParts.urls.push(value.url);\r\n        this.modelParts.minValues.push(value.mintime);\r\n        this.modelParts.maxValues.push(value.maxtime);\r\n    }\r\n\r\n    private updateChart(value: MeasurementResult)\r\n    {\r\n        this.updateModelParts(value);\r\n        this.chart.update();\r\n    }\r\n\r\n    private replaceChartData(modelAsArray: ResultPack)\r\n    {\r\n        this.chart.data[0].x = modelAsArray.urls;\r\n        this.chart.data[1].x = modelAsArray.urls;\r\n        this.chart.data[0].y = modelAsArray.maxValues;\r\n        this.chart.data[1].y = modelAsArray.minValues;\r\n    }\r\n\r\n    private splitModel(): ResultPack\r\n    {\r\n        let res: ResultPack = new ResultPack();\r\n        for (let item of this.model.results)\r\n        {\r\n            res.urls.push(item.url);\r\n            res.minValues.push(item.mintime);\r\n            res.maxValues.push(item.maxtime);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private dataInit()\r\n    {\r\n        this.modelParts = new ResultPack();\r\n\r\n        let trace1 = {\r\n            x: this.modelParts.urls,\r\n            y: this.modelParts.maxValues,\r\n            name: 'Max',\r\n            type: 'bar',\r\n            marker: { color: 'rgb(55, 83, 109)' }\r\n        };\r\n        let trace2 = {\r\n            x: this.modelParts.urls,\r\n            y: this.modelParts.minValues,\r\n            name: 'Min',\r\n            type: 'bar',\r\n            marker: { color: 'rgb(26, 118, 255)' }\r\n        };\r\n        let data = [trace1, trace2];\r\n        this.chart.data = data;\r\n    }\r\n\r\n    private chartInit(divId: HTMLElement)\r\n    {\r\n        let container = $(divId);\r\n        let w = 975;\r\n        let h = 450;\r\n        // hide the char container element\r\n        container.hide();\r\n\r\n        this.chart = new Chart();\r\n        let layout = {\r\n            font: {\r\n                family: \"Segoe UI, Times New Roman, Open Sans, verdana, arial, sans-serif\",\r\n                color: '#444'\r\n            },\r\n            title: 'Load Time Results',\r\n            barmode: 'overlay',\r\n            autosize: true,\r\n            width: w,\r\n            height: h,\r\n            xaxis: {\r\n                title: 'Urls',\r\n                showticklabels: false,\r\n                autorange: true\r\n            },\r\n            yaxis: {\r\n                title: 'Time (s)',\r\n                autorange: true,\r\n                titlefont: {\r\n                    size: 16,\r\n                    color: 'rgb(107, 107, 107)'\r\n                },\r\n                tickfont: {\r\n                    size: 14,\r\n                    color: 'rgb(107, 107, 107)'\r\n                }\r\n            },\r\n            legend: {\r\n                x: 0,\r\n                y: 1.0,\r\n                bgcolor: 'rgba(255, 255, 255, 0)',\r\n                bordercolor: 'rgba(255, 255, 255, 0)'\r\n            }\r\n        };\r\n        this.chart.layout = layout;\r\n        this.chart.canvasElement = divId;\r\n    }\r\n}\r\n\r\nclass ResultPack\r\n{\r\n    constructor()\r\n    {\r\n        this.urls = [];\r\n        this.minValues = [];\r\n        this.maxValues = [];\r\n    }\r\n\r\n    urls: string[];\r\n    minValues: number[];\r\n    maxValues: number[];\r\n}\n\n\n// WEBPACK FOOTER //\n// ./graphics/chartDisplayer.ts","export abstract class ElementDisplayer<TData>\r\n{\r\n    protected htmlElement: HTMLElement;\r\n    protected model: TData;\r\n\r\n    constructor(elementId: string, model: TData)\r\n    {\r\n        this.htmlElement = <HTMLElement>document.querySelector(elementId);\r\n        this.model = model;\r\n    }\r\n\r\n    display<T>(model?: T)\r\n    {\r\n        if (model)\r\n        {\r\n            this.displayFromOuterModel(model);\r\n        }\r\n        else\r\n        {\r\n            this.displayFromLocalModel();\r\n        }\r\n    }\r\n\r\n    show()\r\n    {\r\n        this.htmlElement.style.display = \"block\";\r\n    }\r\n\r\n    hide()\r\n    {\r\n        this.htmlElement.style.display = \"none\";\r\n    }\r\n\r\n    protected abstract displayFromLocalModel();\r\n    protected abstract displayFromOuterModel<T>(model: T);\r\n}\n\n\n// WEBPACK FOOTER //\n// ./graphics/elementDisplayer.ts","export class Chart\r\n{\r\n    data: any;\r\n    layout: any;\r\n    canvasElement: HTMLElement;\r\n\r\n    create()\r\n    {\r\n        Plotly.newPlot(this.canvasElement, this.data, this.layout);\r\n    }\r\n\r\n    update()\r\n    {\r\n        Plotly.redraw(this.canvasElement);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./graphics/chart.ts","import { ElementDisplayer } from \"./elementDisplayer\"\r\nimport * as Model from \"../core/model\"\r\nimport * as Table from \"./tableMaker\"\r\nimport MeasurementResult = Model.MeasurementResult;\r\nimport MeasurementsViewModel = Model.MeasurementsViewModel;\r\n\r\nexport class TableDisplayer extends ElementDisplayer<MeasurementsViewModel>\r\n{\r\n    private tableMaker: Table.TableMaker;\r\n\r\n    constructor(tableContainerId: string, model: MeasurementsViewModel)\r\n    {\r\n        super(tableContainerId, model);\r\n        this.tableMakerInit();\r\n    }\r\n\r\n    private tableMakerInit()\r\n    {\r\n        let headers = [\"Url\", \"Min (s)\", \"Max (s)\"];\r\n        let props = [\"url\", \"mintime\", \"maxtime\"];\r\n        let maper = new Table.HeaderPropertyMaper(headers, props);\r\n\r\n        this.tableMaker = new Table.TableMaker(this.htmlElement, maper);\r\n        this.tableMaker.tableClass = \"table table-bordered table-hover\";\r\n        this.tableMaker.createTabelInContainer();\r\n    }\r\n\r\n    protected displayFromLocalModel()\r\n    {\r\n        this.tableMaker.curentColumnNumber = 1;\r\n        this.tableMaker.fillTableFrom(this.model.results);\r\n        this.tableMaker.curentColumnNumber = 1;\r\n    }\r\n\r\n    protected displayFromOuterModel<T extends MeasurementResult>(model: T)\r\n    {\r\n        this.tableMaker.addRow(model);\r\n    }\r\n\r\n    clear()\r\n    {\r\n        let tbody = this.tableMaker.tableElement.children[0];\r\n        if (tbody)\r\n            tbody.innerHTML = '';\r\n        this.tableMaker.addHeader();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./graphics/tableDisplayer.ts","export class TableMaker\r\n{\r\n    tableClass: string;\r\n    numberColumn: boolean;\r\n    maper: HeaderPropertyMaper;\r\n    tableContainer: HTMLElement;\r\n\r\n    curentColumnNumber: number;\r\n    tableElement: HTMLElement;\r\n\r\n    constructor(tableContainer?: HTMLElement, maper?: HeaderPropertyMaper)\r\n    {\r\n        this.numberColumn = true;\r\n        this.maper = maper;\r\n        this.tableContainer = tableContainer;\r\n        this.curentColumnNumber = 1;\r\n    }\r\n\r\n    private makeHeaderRow(): string\r\n    {\r\n        let result = \"\";\r\n        result += `<tr>`;\r\n\r\n        result += this.makeHeadersByMaper();\r\n\r\n        result += \"</tr>\";\r\n\r\n        return result;\r\n    }\r\n\r\n    private makeHeadersByMaper(): string\r\n    {\r\n        let result = this.numberColumn ? \"<th>#</th>\" : \"\";\r\n\r\n        for (let item of this.maper.list)\r\n        {\r\n            result += `<th>` + item.headerName + \"</th>\";\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private makeTableRow(model): HTMLTableRowElement\r\n    {\r\n        let row: HTMLTableRowElement = document.createElement(\"tr\");\r\n        row.innerHTML = this.maper ? this.makeTableDataByMaper(model) : this.makeTableDataByDefault(model);\r\n        return row;\r\n    }\r\n\r\n    private makeClassAttribute(classValue: string): string\r\n    {\r\n        return `${classValue ? `class=${classValue}` : ''}`;\r\n    }\r\n\r\n    private addRows(model: Array<Object>)\r\n    {\r\n        for (let item of model)\r\n        {\r\n            this.addRow(item);\r\n        }\r\n    }\r\n\r\n    fillTableFrom(model: Array<Object>, mode = InsertionMode.Replace)\r\n    {\r\n        switch (mode)\r\n        {\r\n            case InsertionMode.Append:\r\n                this.addRows(model);\r\n                break;\r\n            case InsertionMode.Replace:\r\n                this.tableElement.innerHTML = '';\r\n                this.addHeader();\r\n                this.addRows(model);\r\n                break;\r\n        }\r\n    }\r\n\r\n    addRow(model)\r\n    {\r\n        this.tableElement.children[0].appendChild(this.makeTableRow(model));\r\n    }\r\n\r\n    addHeader()\r\n    {\r\n        this.tableElement.innerHTML = this.makeHeaderRow();\r\n    }\r\n\r\n    createTabelInContainer(tableContainer?: HTMLElement)\r\n    {\r\n        let container = tableContainer || this.tableContainer;\r\n        if (!container)\r\n            throw new Error(\"I can not insert a table into nowhere, tableContainer is undefined\");\r\n\r\n        let table = document.createElement(\"table\");\r\n        if (this.tableClass)\r\n            table.className = this.tableClass;\r\n        this.tableElement = table;\r\n        container.appendChild(table);\r\n    }\r\n\r\n    private makeTableDataByDefault(model): string\r\n    {\r\n        let result = this.addRowCounter();\r\n        for (let propName in model)\r\n        {\r\n            result += `<td>${model[propName]}</td>`;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private makeTableDataByMaper(model): string\r\n    {\r\n        let result = this.addRowCounter();\r\n        for (let item of this.maper.list)\r\n        {\r\n            result += `<td>${model[item.propertyName]}</td>`;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private addRowCounter(): string\r\n    {\r\n        return this.numberColumn ? `<td>${this.curentColumnNumber++}</td>` : \"\";\r\n    }\r\n}\r\n\r\nexport enum InsertionMode {\r\n    Replace,\r\n    Append\r\n}\r\n\r\nexport class HeaderPropertyMaper\r\n{\r\n    list: HeaderProperty[];\r\n\r\n    constructor(headers?: string[], properties?: string[])\r\n    {\r\n        this.list = [];\r\n        if (headers && properties)\r\n            this.addMap(headers, properties);\r\n    }\r\n\r\n    addMap(headers: string[], properties: string[])\r\n    {\r\n        if (headers.length !== properties.length)\r\n            throw new Error(\"Arrays must have the same length\");\r\n\r\n        for (let i = 0; i < headers.length; i++)\r\n        {\r\n            this.list.push(new HeaderProperty(headers[i], properties[i]));\r\n        }\r\n    }\r\n}\r\n\r\nexport class HeaderProperty\r\n{\r\n    constructor(headerName: string, propertyName: string)\r\n    {\r\n        this.headerName = headerName;\r\n        this.propertyName = propertyName;\r\n    }\r\n\r\n    headerName: string;\r\n    propertyName: string;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./graphics/tableMaker.ts","export class Notifier\r\n{\r\n    connectionId;\r\n    constructor(callback)\r\n    {\r\n        let notifier = $.connection.notificationHub;\r\n        notifier.client.displayMessage = callback;\r\n        let iAm = this;\r\n        $.connection.hub.start().done(() =>\r\n        {\r\n            iAm.connectionId = $.connection.hub.id;\r\n        });\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./infrastructure/signalR.ts"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtnJA;;AAEA;AAEA;AAAA;AAcA;AAZA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAdA;;;;;;;;ACJA;AAEA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AACA;AANA;;;;;;;;ACRA;AACA;AAEA;AAAA;AA0BA;AAxBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AA1BA;;;;;;;;ACFA;AACA;AAGA;AAKA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAvCA;;;;;;;ACLA;;AAEA;AAEA;AAIA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;;;AAAA;AAEA;AAOA;AAEA;AACA;AAVA;AAEA;AACA;AACA;AACA;AACA;;;AAAA;AAMA;AAAA;AAGA;AACA;;;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AACA;;;AAJA;AAMA;AAAA;AAEA;AACA;;;AAAA;AAEA;AAAA;AAEA;AACA;;;AAAA;AACA;AAAA;AAlDA;AAoDA;AAMA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAnCA;;;;;;;;ACxDA;AACA;AAEA;AACA;AAEA;AAOA;AALA;AAOA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAzDA;;;;;;;;ACNA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAzBA;AA2BA;AAAA;AAIA;AAAA;AAAA;AAJA;AAMA;AAAA;AAGA;AAAA;AAAA;AAHA;AAKA;AAAA;AAMA;AAAA;AAAA;AANA;AAQA;AAAA;AAMA;AAAA;AAAA;AANA;;;;;;;;;;;;;AC9CA;AACA;AAKA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnIA;AAqIA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AAAA;;;;;;;;ACvJA;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAIA;AAAA;AAnCA;;;;;;;;ACAA;AAAA;AAeA;AATA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAfA;;;;;;;;;;;;;ACAA;AAEA;AAIA;AAAA;AAIA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAxCA;;;;;;;;ACNA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AA5HA;AA8HA;AACA;AACA;AACA;AAHA;AAKA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AArBA;AAuBA;AAEA;AAEA;AACA;AACA;AAIA;AAAA;AAVA;;;;;;;;AC1JA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAbA;;;;","sourceRoot":""}